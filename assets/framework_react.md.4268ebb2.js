import{_ as s,o as a,c as e,O as o}from"./chunks/framework.2cb66d06.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"framework/react.md","filePath":"framework/react.md"}'),l={name:"framework/react.md"},n=o(`<h2 id="react-hook-有哪些" tabindex="-1">react hook 有哪些？ <a class="header-anchor" href="#react-hook-有哪些" aria-label="Permalink to &quot;react hook 有哪些？&quot;">​</a></h2><h2 id="usecallback-和-usememo-有什么区别" tabindex="-1">useCallback 和 useMemo 有什么区别？ <a class="header-anchor" href="#usecallback-和-usememo-有什么区别" aria-label="Permalink to &quot;useCallback 和 useMemo 有什么区别？&quot;">​</a></h2><p>都属于 React hooks 中的性能优化工具，避免不必要的重新计算和重新创建。</p><p><code>useCallback</code> 记忆一个回调函数，返回的是一个记忆化后的回调函数，主要作用是在依赖变化时，返回的函数不会重新创建，减少不必要的函数创建和传递。 接受两个参数 回调函数和依赖项数组。 当依赖项数组中的任一依赖项发生变化的时候，<code>useCallback</code>会返回一个新的回调函数，否则返回上一次记忆化的回调函数。 主要用于防治子组件在每次渲染的时候重新创建回调函数，适用于将回到函数传递给子组件或使用在<code>useEffect</code>中的回调函数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> memoizedCallback </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCallback</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">callback run...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [counter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> list])</span></span></code></pre></div><p><code>useMemo</code> 用于记忆化计算的结果，返回的是一个记忆化之后的值。 在依赖变化时，返回的值不会重新计算，从而减少不必要的计算开销。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> memoizedValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useMemo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">some value</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [dependency1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dependency2])</span></span></code></pre></div><p>useMemo 接收两个参数：计算函数和依赖项数组。 当依赖项数组中的任何一个依赖项发生变化时，useMemo 会重新计算并返回新的值，否则返回上一次的记忆化值。 主要用于防止在每次渲染时重新计算昂贵的计算结果，适用于计算操作的结果。</p><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><p>useCallback 适用于记忆化回调函数，主要用于优化回调函数的传递和避免子组件重新渲染。 useCallback 的第一个参数是回调函数，第二个参数是依赖项数组。 useCallback 返回一个记忆化后的回调函数。</p><p>useMemo 适用于记忆化计算的结果，主要用于优化计算操作的结果。 useMemo 的第一个参数是计算函数，第二个参数是依赖项数组。 useMemo 返回一个记忆化后的值。</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>`,12),p=[n];function c(t,r,i,y,C,D){return a(),e("div",null,p)}const A=s(l,[["render",c]]);export{u as __pageData,A as default};
