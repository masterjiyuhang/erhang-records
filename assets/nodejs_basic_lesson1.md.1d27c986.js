import{_ as a,o as e,c as t,O as s}from"./chunks/framework.2cb66d06.js";const m=JSON.parse('{"title":"基础部分","description":"","frontmatter":{},"headers":[],"relativePath":"nodejs/basic/lesson1.md","filePath":"nodejs/basic/lesson1.md"}'),i={name:"nodejs/basic/lesson1.md"},o=s('<h1 id="基础部分" tabindex="-1">基础部分 <a class="header-anchor" href="#基础部分" aria-label="Permalink to &quot;基础部分&quot;">​</a></h1><h2 id="微任务与-javascript-运行时环境" tabindex="-1">微任务与 JavaScript 运行时环境 <a class="header-anchor" href="#微任务与-javascript-运行时环境" aria-label="Permalink to &quot;微任务与 JavaScript 运行时环境&quot;">​</a></h2><p>JavaScript 是单线程语言。自从定时器（setTimeout() 和 setInterval()）加入到 Web API 后，浏览器提供的 JavaScript 环境就已经逐渐发展到包含任务调度、多线程应用开发等强大的特性。</p><h3 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-label="Permalink to &quot;执行上下文&quot;">​</a></h3><p>当一段代码运行的时候，它实际上是运行在执行上下文中。下面 3 种类型的代码会创建一个新的执行上下文：</p><ul><li>全局上下文是为运行代码主体而创建的执行上下文，也就是说，它是为那些存在于 JavaScript 函数之外的任何代码而创建的。</li><li>每个函数会在执行的时候创建自己的执行上下文。这个上下文就是通常说的“本地上下文”。</li><li>使用 eval() 函数也会创建一个新的执行上下文。</li></ul><p>每个上下文创建的时候会被推入执行上下文栈。当退出的时候，它会从上下文栈中移除。</p><p>每个程序和函数都能够拥有自己的变量和其他对象。每个上下文还能够额外的跟踪程序中下一行需要执行的代码以及一些对上下文非常重要的信息。通过这种方式来使用上下文和上下文栈，我们可以对程序运行的一些基础部分进行管理，包括局部和全局变量、函数的调用与返回等。</p>',8),r=[o];function c(l,n,_,p,d,h){return e(),t("div",null,r)}const f=a(i,[["render",c]]);export{m as __pageData,f as default};
