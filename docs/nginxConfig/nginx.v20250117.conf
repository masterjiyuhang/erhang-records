user www www;
worker_processes auto;
error_log /www/wwwlogs/nginx_error.log crit;
pid /www/server/nginx/logs/nginx.pid;
worker_rlimit_nofile 51200;


events {
  use epoll;
  worker_connections 51200;
  multi_accept on;
}

http {
  include mime.types;
  default_type application/octet-stream;
  server_names_hash_bucket_size 512;
  client_max_body_size 50m;
  sendfile on;
  keepalive_timeout 60;
  gzip on;
  lua_package_path "/www/server/nginx/lib/lua/?.lua;;";

  # 全局 SSL 配置（避免重复）
  ssl_session_timeout 5m;
  ssl_session_cache shared:SSL:10m;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
  ssl_prefer_server_ciphers on;

  # www.erhang.fun 配置
  server {
    listen 80;
    server_name www.erhang.fun;

    # 强制 HTTP 跳转到 HTTPS
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl;
    server_name www.erhang.fun;

    # SSL 证书
    ssl_certificate /www/wwwroot/sslkey/erhang/erhang.fun_bundle.crt;
    ssl_certificate_key /www/wwwroot/sslkey/erhang/erhang.fun.key;

    # 静态文件处理
    location / {
      root /www/wwwroot/erhang-records/;
      index index.html;
      try_files $uri $uri/ /index.html;
    }

    # 禁止访问敏感文件
    location ~ ^/(\.user.ini|\.htaccess|\.git|\.env|\.svn|\.project|LICENSE|README.md) {
      return 404;
    }
  }

  # mock.erhang.fun 配置
  server {
    listen 80;
    server_name mock.erhang.fun;

    # 强制 HTTP 跳转到 HTTPS
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl;
    server_name mock.erhang.fun;

    # SSL 证书
    ssl_certificate /www/wwwroot/sslkey/erhang/mock.erhang.fun_bundle.crt;
    ssl_certificate_key /www/wwwroot/sslkey/erhang/mock.erhang.fun.key;

    # 反向代理到 Mock 服务
    location / {
      proxy_pass http://127.0.0.1:7300;
      proxy_set_header Host $host;
    }
  }

  include /www/server/panel/vhost/nginx/*.conf;
}
